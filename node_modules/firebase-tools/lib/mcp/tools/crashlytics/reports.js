"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.get_top_operating_systems = exports.get_top_android_devices = exports.get_top_apple_devices = exports.get_top_versions = exports.get_top_variants = exports.get_top_issues = void 0;
const tool_1 = require("../../tool");
const util_1 = require("../../util");
const reports_1 = require("../../../crashlytics/reports");
function getReportContent(report) {
    return async ({ appId, filter, pageSize }) => {
        if (!appId)
            return (0, util_1.mcpError)(`Must specify 'appId' parameter.`);
        filter !== null && filter !== void 0 ? filter : (filter = {});
        return (0, util_1.toContent)(await (0, reports_1.getReport)(report, appId, filter, pageSize));
    };
}
exports.get_top_issues = (0, tool_1.tool)({
    name: "get_top_issues",
    description: `Counts events and distinct impacted users, grouped by *issue*.
      Groups are sorted by event count, in descending order.
      Only counts events matching the given filters.`,
    inputSchema: reports_1.ReportInputSchema,
    annotations: {
        title: "Get Crashlytics Top Issues Report",
        readOnlyHint: true,
    },
    _meta: {
        requiresAuth: true,
    },
}, getReportContent(reports_1.CrashlyticsReport.TopIssues));
exports.get_top_variants = (0, tool_1.tool)({
    name: "get_top_variants",
    description: `Counts events and distinct impacted users, grouped by issue *variant*.
      Groups are sorted by event count, in descending order.
      Only counts events matching the given filters.`,
    inputSchema: reports_1.ReportInputSchema,
    annotations: {
        title: "Get Crashlytics Top Variants Report",
        readOnlyHint: true,
    },
    _meta: {
        requiresAuth: true,
    },
}, getReportContent(reports_1.CrashlyticsReport.TopVariants));
exports.get_top_versions = (0, tool_1.tool)({
    name: "get_top_versions",
    description: `Counts events and distinct impacted users, grouped by *version*.
      Groups are sorted by event count, in descending order.
      Only counts events matching the given filters.`,
    inputSchema: reports_1.ReportInputSchema,
    annotations: {
        title: "Get Crashlytics Top Versions Report",
        readOnlyHint: true,
    },
    _meta: {
        requiresAuth: true,
    },
}, getReportContent(reports_1.CrashlyticsReport.TopVersions));
exports.get_top_apple_devices = (0, tool_1.tool)({
    name: "get_top_apple_devices",
    description: `Counts events and distinct impacted users, grouped by apple *device*.
      Groups are sorted by event count, in descending order.
      Only counts events matching the given filters.
      Only relevant for iOS, iPadOS and MacOS applications.`,
    inputSchema: reports_1.ReportInputSchema,
    annotations: {
        title: "Get Crashlytics Top Apple Devices Report",
        readOnlyHint: true,
    },
    _meta: {
        requiresAuth: true,
    },
}, getReportContent(reports_1.CrashlyticsReport.TopAppleDevices));
exports.get_top_android_devices = (0, tool_1.tool)({
    name: "get_top_android_devices",
    description: `Counts events and distinct impacted users, grouped by android *device*.
      Groups are sorted by event count, in descending order.
      Only counts events matching the given filters.
      Only relevant for Android applications.`,
    inputSchema: reports_1.ReportInputSchema,
    annotations: {
        title: "Get Crashlytics Top Android Devices Report",
        readOnlyHint: true,
    },
    _meta: {
        requiresAuth: true,
    },
}, getReportContent(reports_1.CrashlyticsReport.TopAndroidDevices));
exports.get_top_operating_systems = (0, tool_1.tool)({
    name: "get_top_operating_systems",
    description: `Counts events and distinct impacted users, grouped by *operating system*.
      Groups are sorted by event count, in descending order.
      Only counts events matching the given filters.`,
    inputSchema: reports_1.ReportInputSchema,
    annotations: {
        title: "Get Crashlytics Top Operating Systems Report",
        readOnlyHint: true,
    },
    _meta: {
        requiresAuth: true,
    },
}, getReportContent(reports_1.CrashlyticsReport.TopOperatingSystems));
