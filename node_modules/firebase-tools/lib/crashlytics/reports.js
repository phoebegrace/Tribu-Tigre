"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReport = exports.CrashlyticsReport = exports.ReportInputSchema = void 0;
const zod_1 = require("zod");
const logger_1 = require("../logger");
const error_1 = require("../error");
const utils_1 = require("./utils");
const filters_1 = require("./filters");
const DEFAULT_PAGE_SIZE = 10;
exports.ReportInputSchema = zod_1.z.object({
    appId: filters_1.ApplicationIdSchema,
    filter: filters_1.EventFilterSchema,
    pageSize: zod_1.z.number().optional().describe("Number of rows to return").default(DEFAULT_PAGE_SIZE),
});
var CrashlyticsReport;
(function (CrashlyticsReport) {
    CrashlyticsReport["TopIssues"] = "topIssues";
    CrashlyticsReport["TopVariants"] = "topVariants";
    CrashlyticsReport["TopVersions"] = "topVersions";
    CrashlyticsReport["TopOperatingSystems"] = "topOperatingSystems";
    CrashlyticsReport["TopAppleDevices"] = "topAppleDevices";
    CrashlyticsReport["TopAndroidDevices"] = "topAndroidDevices";
})(CrashlyticsReport = exports.CrashlyticsReport || (exports.CrashlyticsReport = {}));
async function getReport(report, appId, filter, pageSize = DEFAULT_PAGE_SIZE) {
    const requestProjectNumber = (0, utils_1.parseProjectNumber)(appId);
    try {
        const queryParams = (0, filters_1.filterToUrlSearchParams)(filter);
        queryParams.set("page_size", `${pageSize}`);
        logger_1.logger.debug(`[crashlytics] report ${report} called with appId: ${appId} filter: ${queryParams.toString()}, page_size: ${pageSize}`);
        const response = await utils_1.CRASHLYTICS_API_CLIENT.request({
            method: "GET",
            headers: {
                "Content-Type": "application/json",
            },
            path: `/projects/${requestProjectNumber}/apps/${appId}/reports/${report}`,
            queryParams: queryParams,
            timeout: utils_1.TIMEOUT,
        });
        return response.body;
    }
    catch (err) {
        throw new error_1.FirebaseError(`Failed to fetch ${report} report for app: ${appId}`, {
            original: (0, error_1.getError)(err),
        });
    }
}
exports.getReport = getReport;
